{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","components/searchbox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","player","name","src","id","email","CardList","console","log","players","map","key","Searchbox","placeholder","handleChange","type","onChange","App","state","string","searchField","fetch","then","response","json","usersArray","setState","this","filteredPlayers","filter","toLowerCase","includes","e","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAIaA,G,YAAO,SAACC,GAEjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,OAAOC,KAAMC,IAAG,+BAA0BL,EAAMG,OAAOG,GAAvC,2BAChC,gCAAMN,EAAMG,OAAOC,KAAnB,KACA,gCAAMJ,EAAMG,OAAOG,GAAnB,KACA,+BAAKN,EAAMG,OAAOI,MAAlB,QCJCC,G,MAAW,SAACR,GAGrB,OAFAS,QAAQC,IAAIV,GAGR,yBAAKC,UAAU,YACdD,EAAMW,QAAQC,KAAI,SAACT,GAAD,OACf,kBAAC,EAAD,CAAMU,IAAKV,EAAOG,GAAIH,OAAQA,UCT7BW,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAEpC,OACI,2BAAOf,UAAU,SACjBgB,KAAK,SACLF,YAAeA,EACfG,SAAUF,MCwDHG,E,YA5Db,aAAc,IAAD,8BACX,+CAEKC,MAAQ,CACXC,OAAS,eAETV,QAAU,GAEVW,YAAc,IARL,E,iFAYO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,OAAI,EAAKC,SAAS,CAACjB,QAAUgB,S,+BAGtC,IAAD,SAEyBE,KAAKT,MAA7BT,EAFD,EAECA,QAASW,EAFV,EAEUA,YAEVQ,EAAkBnB,EAAQoB,QAAO,SAAC5B,GAAD,OACrCA,EAAOC,KAAK4B,cAAcC,SAASX,EAAYU,kBAIjD,OAEE,yBAAK/B,UAAU,OAEX,yDAEA,kBAAC,EAAD,CACAc,YAAY,oBACZC,aAAgB,SAACkB,GACf,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,QAAQ,WAC5C3B,QAAQC,IAAI,EAAKU,MAAME,mBAK3B,kBAAC,EAAD,CAAUX,QAASmB,IAEnB,4BAAKD,KAAKT,MAAMC,QAChB,4BAAQgB,QAAU,WACS,iBAAtB,EAAKjB,MAAMC,OACZ,EAAKO,SAAS,CAACP,OAAS,eAGxB,EAAKO,SAAS,CAACP,OAAS,mBAL5B,c,GA9CQiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.3e8c582a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = (props) => {\r\n    \r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt={props.player.name} src={`https://robohash.org/${props.player.id}?set=set2&size=80x120`}/>\r\n            <h5> {props.player.name} </h5>\r\n            <h6> {props.player.id} </h6>\r\n            <p> {props.player.email} </p>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\nimport {Card} from \"../card/card.component\"\r\n\r\nimport './cardlist.styles.css';\r\n\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n\r\n    return(\r\n        <div className=\"cardlist\"> \r\n        {props.players.map((player) => (\r\n            <Card key={player.id} player={player}/>\r\n        ))} \r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\nimport \"./searchbox.styles.css\";\r\n\r\nexport const Searchbox = ({placeholder, handleChange}) => {\r\n\r\n    return(\r\n        <input className=\"search\"\r\n        type=\"search\"\r\n        placeholder = {placeholder}\r\n        onChange={handleChange}\r\n        />\r\n\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/cardlist/cardlist.component';\nimport { Searchbox } from './components/searchbox/searchbox.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      string : \"It's awesome\",\n      \n      players : [],\n\n      searchField : \"\"\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(usersArray => this.setState({players : usersArray}));\n  }\n\n  render(){\n\n    const {players, searchField} = this.state;\n\n    const filteredPlayers = players.filter((player) => \n      player.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n\n    return(\n\n      <div className=\"App\">\n\n          <h1>Players Management System</h1>\n\n          <Searchbox\n          placeholder=\"Search players...\"\n          handleChange = {(e) => {\n            this.setState({searchField : e.target.value}, () => {\n              console.log(this.state.searchField);\n            })\n          }}\n          />\n\n          <CardList players={filteredPlayers}/>\n\n          <h2>{this.state.string}</h2>\n          <button onClick={ () => {\n            if(this.state.string === \"It's Awesome\"){\n              this.setState({string : \"It's Magic\"})\n            }\n            else{\n              this.setState({string : \"It's Awesome\"})\n            }\n            }}>React</button>\n    \n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}